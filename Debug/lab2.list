
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004430  080001c0  080001c0  000011c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080045f0  080045f0  000055f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004630  08004630  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004630  08004630  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004630  08004630  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004630  08004630  00005630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004634  08004634  00005634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004638  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08004644  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08004644  0000609c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6f7  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab3  00000000  00000000  00010733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  000121e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f0  00000000  00000000  00012c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa64  00000000  00000000  00013470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad16  00000000  00000000  0003ded4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010aa14  00000000  00000000  00048bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001535fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  00153644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001562a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080045d8 	.word	0x080045d8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080045d8 	.word	0x080045d8

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e2:	f000 fb6a 	bl	80010ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e6:	f000 f863 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ea:	f000 f93b 	bl	8000c64 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MX_ADC1_Init(0);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 f8b0 	bl	8000b54 <MX_ADC1_Init>

  // first pass of program ensure that it is in vref mode to get value to calculate temperature
  vref=refVoltage();
 80009f4:	f000 f9a4 	bl	8000d40 <refVoltage>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a29      	ldr	r2, [pc, #164]	@ (8000aa0 <main+0xc4>)
 80009fc:	6013      	str	r3, [r2, #0]
  int mode = 0; // mode 0 vref, mode 1 temp
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(myLed2_GPIO_Port, myLed2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a08:	4826      	ldr	r0, [pc, #152]	@ (8000aa4 <main+0xc8>)
 8000a0a:	f002 f925 	bl	8002c58 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	int status;
	for (int i=0; i<1; i++) { //polling sometimes not capturing so try twice
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	e00c      	b.n	8000a2e <main+0x52>
		status = HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin); //tutorial
 8000a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a18:	4823      	ldr	r0, [pc, #140]	@ (8000aa8 <main+0xcc>)
 8000a1a:	f002 f905 	bl	8002c28 <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	60bb      	str	r3, [r7, #8]
		if (status == 0) {
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <main+0x5a>
	for (int i=0; i<1; i++) { //polling sometimes not capturing so try twice
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	ddef      	ble.n	8000a14 <main+0x38>
 8000a34:	e000      	b.n	8000a38 <main+0x5c>
			break;
 8000a36:	bf00      	nop
		}
	}

	if (status == 0) {
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d119      	bne.n	8000a72 <main+0x96>
		if (mode == 0) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10b      	bne.n	8000a5c <main+0x80>
			mode = 1; //pressed need to switch to temperature mode and turn on LED since it was in vref mode
 8000a44:	2301      	movs	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(myLed2_GPIO_Port, myLed2_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4e:	4815      	ldr	r0, [pc, #84]	@ (8000aa4 <main+0xc8>)
 8000a50:	f002 f902 	bl	8002c58 <HAL_GPIO_WritePin>
			MX_ADC1_Init(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f000 f87d 	bl	8000b54 <MX_ADC1_Init>
 8000a5a:	e00a      	b.n	8000a72 <main+0x96>

		}
		else {
			mode = 0; // pressed need to switch from temp mode to vref mode and turn off LED
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_WritePin(myLed2_GPIO_Port, myLed2_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a66:	480f      	ldr	r0, [pc, #60]	@ (8000aa4 <main+0xc8>)
 8000a68:	f002 f8f6 	bl	8002c58 <HAL_GPIO_WritePin>
			MX_ADC1_Init(0);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 f871 	bl	8000b54 <MX_ADC1_Init>
		}
	}
	
 
  if (HAL_GPIO_ReadPin(myLed2_GPIO_Port, myLed2_Pin) == GPIO_PIN_SET) {
 8000a72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a76:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <main+0xc8>)
 8000a78:	f002 f8d6 	bl	8002c28 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d108      	bne.n	8000a94 <main+0xb8>
		temp = tempSensor(vref); // if LED is one keep on reading temperature
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <main+0xc4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f9aa 	bl	8000de0 <tempSensor>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <main+0xd0>)
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e7bc      	b.n	8000a0e <main+0x32>
  }
  else {
		vref = refVoltage(); // if LED is off keep on reasing reference voltage
 8000a94:	f000 f954 	bl	8000d40 <refVoltage>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a01      	ldr	r2, [pc, #4]	@ (8000aa0 <main+0xc4>)
 8000a9c:	6013      	str	r3, [r2, #0]
  {
 8000a9e:	e7b6      	b.n	8000a0e <main+0x32>
 8000aa0:	20000090 	.word	0x20000090
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	48000800 	.word	0x48000800
 8000aac:	20000094 	.word	0x20000094

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b096      	sub	sp, #88	@ 0x58
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2244      	movs	r2, #68	@ 0x44
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 fd5e 	bl	8004580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f002 f8f8 	bl	8002cc8 <HAL_PWREx_ControlVoltageScaling>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ade:	f000 fa13 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000aee:	2360      	movs	r3, #96	@ 0x60
 8000af0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000af6:	2301      	movs	r3, #1
 8000af8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000afe:	233c      	movs	r3, #60	@ 0x3c
 8000b00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 f97c 	bl	8002e10 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b1e:	f000 f9f3 	bl	8000f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2303      	movs	r3, #3
 8000b28:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	2105      	movs	r1, #5
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fd82 	bl	8003644 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b46:	f000 f9df 	bl	8000f08 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3758      	adds	r7, #88	@ 0x58
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(int mode)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b6e:	4b39      	ldr	r3, [pc, #228]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000b70:	4a39      	ldr	r2, [pc, #228]	@ (8000c58 <MX_ADC1_Init+0x104>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1; // prescaler is 1
 8000b74:	4b37      	ldr	r3, [pc, #220]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7a:	4b36      	ldr	r3, [pc, #216]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b80:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b86:	4b33      	ldr	r3, [pc, #204]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8c:	4b31      	ldr	r3, [pc, #196]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b92:	4b30      	ldr	r3, [pc, #192]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b98:	4b2e      	ldr	r3, [pc, #184]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bac:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb2:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb8:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc0:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bc6:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bce:	4821      	ldr	r0, [pc, #132]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000bd0:	f000 fd10 	bl	80015f4 <HAL_ADC_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000bda:	f000 f995 	bl	8000f08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_ADC1_Init+0x108>)
 8000be0:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be2:	2306      	movs	r3, #6
 8000be4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000be6:	2306      	movs	r3, #6
 8000be8:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bea:	237f      	movs	r3, #127	@ 0x7f
 8000bec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4815      	ldr	r0, [pc, #84]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000bfe:	f000 ff71 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000c08:	f000 f97e 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (mode == 0) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d104      	bne.n	8000c1c <MX_ADC1_Init+0xc8>
	  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_ADC1_Init+0x108>)
 8000c14:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; //STM32L475xx manual pg 93, 12 us / (1/48Mhz) = 576 CCs
 8000c16:	2307      	movs	r3, #7
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e003      	b.n	8000c24 <MX_ADC1_Init+0xd0>
  }
  else {
	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <MX_ADC1_Init+0x10c>)
 8000c1e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;//STM32L475xx manual pg 165, 5 us / (1/48Mhz) = 240 CCs
 8000c20:	2306      	movs	r3, #6
 8000c22:	613b      	str	r3, [r7, #16]
  }
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2306      	movs	r3, #6
 8000c26:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c28:	237f      	movs	r3, #127	@ 0x7f
 8000c2a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <MX_ADC1_Init+0x100>)
 8000c3c:	f000 ff52 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0xf6>
  {
	  Error_Handler();
 8000c46:	f000 f95f 	bl	8000f08 <Error_Handler>
  }

  /* USER CODE END ADC1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000028 	.word	0x20000028
 8000c58:	50040000 	.word	0x50040000
 8000c5c:	80000001 	.word	0x80000001
 8000c60:	c7520000 	.word	0xc7520000

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_GPIO_Init+0x94>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf8 <MX_GPIO_Init+0x94>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <MX_GPIO_Init+0x94>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <MX_GPIO_Init+0x94>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <MX_GPIO_Init+0x94>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <MX_GPIO_Init+0x94>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed2_GPIO_Port, myLed2_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cb0:	4812      	ldr	r0, [pc, #72]	@ (8000cfc <MX_GPIO_Init+0x98>)
 8000cb2:	f001 ffd1 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_GPIO_Init+0x9c>)
 8000ccc:	f001 fe1a 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed2_Pin */
  GPIO_InitStruct.Pin = myLed2_Pin;
 8000cd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed2_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <MX_GPIO_Init+0x98>)
 8000cea:	f001 fe0b 	bl	8002904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	48000800 	.word	0x48000800

08000d04 <pollData>:

/* USER CODE BEGIN 4 */

uint32_t pollData() {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  // Begin Calibration
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); // pg 142 in HAL driver manual
 8000d0a:	217f      	movs	r1, #127	@ 0x7f
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <pollData+0x38>)
 8000d0e:	f001 fcb3 	bl	8002678 <HAL_ADCEx_Calibration_Start>

	// Start the conversion
	HAL_ADC_Start(&hadc1); // pg 109 in HAL Driver Manual
 8000d12:	480a      	ldr	r0, [pc, #40]	@ (8000d3c <pollData+0x38>)
 8000d14:	f000 fdb4 	bl	8001880 <HAL_ADC_Start>

  // Poll for reference values
  while (HAL_OK != HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY-1));  //pg 69 in HAL driver manual // change time
 8000d18:	bf00      	nop
 8000d1a:	f06f 0101 	mvn.w	r1, #1
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <pollData+0x38>)
 8000d20:	f000 fe44 	bl	80019ac <HAL_ADC_PollForConversion>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f7      	bne.n	8000d1a <pollData+0x16>
	uint32_t POLLEDDATA = HAL_ADC_GetValue(&hadc1); // pg 110 in HAL Driver Manual
 8000d2a:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <pollData+0x38>)
 8000d2c:	f000 fecd 	bl	8001aca <HAL_ADC_GetValue>
 8000d30:	6078      	str	r0, [r7, #4]

  return POLLEDDATA;
 8000d32:	687b      	ldr	r3, [r7, #4]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000028 	.word	0x20000028

08000d40 <refVoltage>:
	}

	return 0;
}

uint32_t refVoltage() {
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
	uint32_t VREFINTDATA = pollData();
 8000d46:	f7ff ffdd 	bl	8000d04 <pollData>
 8000d4a:	60f8      	str	r0, [r7, #12]

	if (VREFINTDATA == -1)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d52:	d102      	bne.n	8000d5a <refVoltage+0x1a>
		return -1;
 8000d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d58:	e034      	b.n	8000dc4 <refVoltage+0x84>

	// Convert to real voltage value
	uint32_t VOLTAGEREF = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(VREFINTDATA, ADC_RESOLUTION_12B); //pg 129 in HAL Driver Manual
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <refVoltage+0x98>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000d64:	fb03 f202 	mul.w	r2, r3, r2
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	60bb      	str	r3, [r7, #8]
	// Our implementation pg 692 RM0432 Reference manual
	uint32_t VOLTAGEREF1 = VREFCHARAC * (VREFINTCAL + 0.0) / (VREFINTDATA); // I add 0.0 to convert to floats to have accurate result
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <refVoltage+0x98>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fb95 	bl	80004a4 <__aeabi_i2d>
 8000d7a:	a315      	add	r3, pc, #84	@ (adr r3, 8000dd0 <refVoltage+0x90>)
 8000d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d80:	f7ff fbfa 	bl	8000578 <__aeabi_dmul>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4614      	mov	r4, r2
 8000d8a:	461d      	mov	r5, r3
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fb79 	bl	8000484 <__aeabi_ui2d>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	4620      	mov	r0, r4
 8000d98:	4629      	mov	r1, r5
 8000d9a:	f7ff fd17 	bl	80007cc <__aeabi_ddiv>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	f7ff fdf9 	bl	800099c <__aeabi_d2uiz>
 8000daa:	4603      	mov	r3, r0
 8000dac:	607b      	str	r3, [r7, #4]

	while (HAL_OK != HAL_ADC_Stop(&hadc1)); // pg 107 in HAL driver manual
 8000dae:	bf00      	nop
 8000db0:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <refVoltage+0x9c>)
 8000db2:	f000 fdc8 	bl	8001946 <HAL_ADC_Stop>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f9      	bne.n	8000db0 <refVoltage+0x70>
	return ((VOLTAGEREF + VOLTAGEREF1) / 2);
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	085b      	lsrs	r3, r3, #1

}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdb0      	pop	{r4, r5, r7, pc}
 8000dcc:	f3af 8000 	nop.w
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	40a77000 	.word	0x40a77000
 8000dd8:	1fff75aa 	.word	0x1fff75aa
 8000ddc:	20000028 	.word	0x20000028

08000de0 <tempSensor>:

// In note section the VREF+ value is needed because the TSDATA is under the assumption that is taken at 3V so an adjustment must be made
// pg 691 in note section in chip manual or RM0432 Reference manual
uint32_t tempSensor(uint32_t VREFPLUS) {
 8000de0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  uint32_t TSDATA = pollData();
 8000dea:	f7ff ff8b 	bl	8000d04 <pollData>
 8000dee:	6178      	str	r0, [r7, #20]

   if (TSDATA == -1)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000df6:	d102      	bne.n	8000dfe <tempSensor+0x1e>
    return -1;
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dfc:	e06e      	b.n	8000edc <tempSensor+0xfc>

  //Convert to actual temperature value
  uint32_t TEMPREAL = __HAL_ADC_CALC_TEMPERATURE(VREFPLUS, TSDATA, ADC_RESOLUTION_12B); //pg 130 in HAL Driver Manual
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef0 <tempSensor+0x110>)
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef4 <tempSensor+0x114>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d018      	beq.n	8000e3c <tempSensor+0x5c>
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	4a39      	ldr	r2, [pc, #228]	@ (8000ef8 <tempSensor+0x118>)
 8000e14:	fba2 2303 	umull	r2, r3, r2, r3
 8000e18:	099b      	lsrs	r3, r3, #6
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b35      	ldr	r3, [pc, #212]	@ (8000ef4 <tempSensor+0x114>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2264      	movs	r2, #100	@ 0x64
 8000e24:	fb03 f202 	mul.w	r2, r3, r2
 8000e28:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <tempSensor+0x110>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <tempSensor+0x114>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e38:	331e      	adds	r3, #30
 8000e3a:	e001      	b.n	8000e40 <tempSensor+0x60>
 8000e3c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000e40:	613b      	str	r3, [r7, #16]

  //Our implementation pg 691 RM0432 Reference manual, Based on the manual TSDATA must be converted to the VREF+
  uint32_t TEMPREAL1 = (((TSCAL2TEMP - TSCAL1TEMP + 0.0)/(TSCAL2 - TSCAL1)) * ((((3304+0.0)/3000)*TSDATA) - TSCAL1))+ 30;
 8000e42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <tempSensor+0x110>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <tempSensor+0x114>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fb28 	bl	80004a4 <__aeabi_i2d>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	f04f 0000 	mov.w	r0, #0
 8000e5c:	4927      	ldr	r1, [pc, #156]	@ (8000efc <tempSensor+0x11c>)
 8000e5e:	f7ff fcb5 	bl	80007cc <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4614      	mov	r4, r2
 8000e68:	461d      	mov	r5, r3
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff fb0a 	bl	8000484 <__aeabi_ui2d>
 8000e70:	a31d      	add	r3, pc, #116	@ (adr r3, 8000ee8 <tempSensor+0x108>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fb7f 	bl	8000578 <__aeabi_dmul>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4690      	mov	r8, r2
 8000e80:	4699      	mov	r9, r3
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <tempSensor+0x114>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fb0c 	bl	80004a4 <__aeabi_i2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4640      	mov	r0, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	f7ff f9b8 	bl	8000208 <__aeabi_dsub>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	f7ff fb6a 	bl	8000578 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <tempSensor+0x120>)
 8000eb2:	f7ff f9ab 	bl	800020c <__adddf3>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff fd6d 	bl	800099c <__aeabi_d2uiz>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60fb      	str	r3, [r7, #12]

  while (HAL_OK != HAL_ADC_Stop(&hadc1)); // pg 107 in HAL driver manual
 8000ec6:	bf00      	nop
 8000ec8:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <tempSensor+0x124>)
 8000eca:	f000 fd3c 	bl	8001946 <HAL_ADC_Stop>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f9      	bne.n	8000ec8 <tempSensor+0xe8>

  return (TEMPREAL + TEMPREAL1) / 2;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	085b      	lsrs	r3, r3, #1

}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ee6:	bf00      	nop
 8000ee8:	b38a94d2 	.word	0xb38a94d2
 8000eec:	3ff19f0f 	.word	0x3ff19f0f
 8000ef0:	1fff75ca 	.word	0x1fff75ca
 8000ef4:	1fff75a8 	.word	0x1fff75a8
 8000ef8:	057619f1 	.word	0x057619f1
 8000efc:	40590000 	.word	0x40590000
 8000f00:	403e0000 	.word	0x403e0000
 8000f04:	20000028 	.word	0x20000028

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <Error_Handler+0x8>

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f36:	4a08      	ldr	r2, [pc, #32]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_MspInit+0x44>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0a8      	sub	sp, #160	@ 0xa0
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2294      	movs	r2, #148	@ 0x94
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 fb07 	bl	8004580 <memset>
  if(hadc->Instance==ADC1)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a19      	ldr	r2, [pc, #100]	@ (8000fdc <HAL_ADC_MspInit+0x80>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d12b      	bne.n	8000fd4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f7c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f80:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f82:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000f92:	2318      	movs	r3, #24
 8000f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fa2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fdcf 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000fb8:	f7ff ffa6 	bl	8000f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_ADC_MspInit+0x84>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_ADC_MspInit+0x84>)
 8000fc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_ADC_MspInit+0x84>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fd4:	bf00      	nop
 8000fd6:	37a0      	adds	r7, #160	@ 0xa0
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	50040000 	.word	0x50040000
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <NMI_Handler+0x4>

08000fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <UsageFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103a:	f000 f893 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 fa7b 	bl	8004590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109a:	f7ff fc9f 	bl	80009dc <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010ac:	08004638 	.word	0x08004638
  ldr r2, =_sbss
 80010b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b4:	2000009c 	.word	0x2000009c

080010b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_IRQHandler>

080010ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f001 fbe9 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f80e 	bl	80010ec <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010dc:	f7ff ff1a 	bl	8000f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010f8:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_InitTick+0x6c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d023      	beq.n	8001148 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_InitTick+0x70>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_InitTick+0x6c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fbe7 	bl	80028ea <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d809      	bhi.n	800113c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001130:	f001 fbbf 	bl	80028b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001134:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_InitTick+0x74>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e007      	b.n	800114c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e004      	b.n	800114c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e001      	b.n	800114c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	20000098 	.word	0x20000098

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000098 	.word	0x20000098

080011a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3360      	adds	r3, #96	@ 0x60
 800121e:	461a      	mov	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <LL_ADC_SetOffset+0x44>)
 800122e:	4013      	ands	r3, r2
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	4313      	orrs	r3, r2
 800123c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	03fff000 	.word	0x03fff000

08001254 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3360      	adds	r3, #96	@ 0x60
 8001262:	461a      	mov	r2, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3360      	adds	r3, #96	@ 0x60
 8001290:	461a      	mov	r2, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012aa:	bf00      	nop
 80012ac:	371c      	adds	r7, #28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	615a      	str	r2, [r3, #20]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001302:	b480      	push	{r7}
 8001304:	b087      	sub	sp, #28
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3330      	adds	r3, #48	@ 0x30
 8001312:	461a      	mov	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	4413      	add	r3, r2
 8001320:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	211f      	movs	r1, #31
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	401a      	ands	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0e9b      	lsrs	r3, r3, #26
 800133a:	f003 011f 	and.w	r1, r3, #31
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	431a      	orrs	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800135a:	b480      	push	{r7}
 800135c:	b087      	sub	sp, #28
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	3314      	adds	r3, #20
 800136a:	461a      	mov	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	0e5b      	lsrs	r3, r3, #25
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	0d1b      	lsrs	r3, r3, #20
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	2107      	movs	r1, #7
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	0d1b      	lsrs	r3, r3, #20
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	431a      	orrs	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013a4:	bf00      	nop
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0318 	and.w	r3, r3, #24
 80013d2:	4908      	ldr	r1, [pc, #32]	@ (80013f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013d4:	40d9      	lsrs	r1, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	400b      	ands	r3, r1
 80013da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013de:	431a      	orrs	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	0007ffff 	.word	0x0007ffff

080013f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6093      	str	r3, [r2, #8]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800142c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001430:	d101      	bne.n	8001436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001458:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001480:	d101      	bne.n	8001486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014d0:	f043 0202 	orr.w	r2, r3, #2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <LL_ADC_IsEnabled+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_ADC_IsEnabled+0x1a>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b02      	cmp	r3, #2
 800151c:	d101      	bne.n	8001522 <LL_ADC_IsDisableOngoing+0x18>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_IsDisableOngoing+0x1a>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001544:	f043 0204 	orr.w	r2, r3, #4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001568:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800156c:	f043 0210 	orr.w	r2, r3, #16
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b04      	cmp	r3, #4
 8001592:	d101      	bne.n	8001598 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ba:	f043 0220 	orr.w	r2, r3, #32
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d101      	bne.n	80015e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e129      	b.n	8001862 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	2b00      	cmp	r3, #0
 800161a:	d109      	bne.n	8001630 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fc9d 	bl	8000f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fef1 	bl	800141c <LL_ADC_IsDeepPowerDownEnabled>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fed7 	bl	80013f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff0c 	bl	800146c <LL_ADC_IsInternalRegulatorEnabled>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d115      	bne.n	8001686 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fef0 	bl	8001444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001664:	4b81      	ldr	r3, [pc, #516]	@ (800186c <HAL_ADC_Init+0x278>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	4a81      	ldr	r2, [pc, #516]	@ (8001870 <HAL_ADC_Init+0x27c>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	3301      	adds	r3, #1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001678:	e002      	b.n	8001680 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3b01      	subs	r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f9      	bne.n	800167a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff feee 	bl	800146c <LL_ADC_IsInternalRegulatorEnabled>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	f043 0210 	orr.w	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff62 	bl	8001580 <LL_ADC_REG_IsConversionOngoing>
 80016bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f040 80c2 	bne.w	8001850 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f040 80be 	bne.w	8001850 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016dc:	f043 0202 	orr.w	r2, r3, #2
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fefb 	bl	80014e4 <LL_ADC_IsEnabled>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10b      	bne.n	800170c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016f4:	485f      	ldr	r0, [pc, #380]	@ (8001874 <HAL_ADC_Init+0x280>)
 80016f6:	f7ff fef5 	bl	80014e4 <LL_ADC_IsEnabled>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4619      	mov	r1, r3
 8001706:	485c      	ldr	r0, [pc, #368]	@ (8001878 <HAL_ADC_Init+0x284>)
 8001708:	f7ff fd4c 	bl	80011a4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e5b      	ldrb	r3, [r3, #25]
 8001710:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001716:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800171c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001722:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d106      	bne.n	8001748 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	3b01      	subs	r3, #1
 8001740:	045b      	lsls	r3, r3, #17
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d009      	beq.n	8001764 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001754:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	4b44      	ldr	r3, [pc, #272]	@ (800187c <HAL_ADC_Init+0x288>)
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	69b9      	ldr	r1, [r7, #24]
 8001774:	430b      	orrs	r3, r1
 8001776:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff26 	bl	80015ce <LL_ADC_INJ_IsConversionOngoing>
 8001782:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d140      	bne.n	800180c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d13d      	bne.n	800180c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e1b      	ldrb	r3, [r3, #24]
 8001798:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800179a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017b2:	f023 0306 	bic.w	r3, r3, #6
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	430b      	orrs	r3, r1
 80017be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d118      	bne.n	80017fc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017e6:	4311      	orrs	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017ec:	430a      	orrs	r2, r1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	e007      	b.n	800180c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10c      	bne.n	800182e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f023 010f 	bic.w	r1, r3, #15
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	1e5a      	subs	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	631a      	str	r2, [r3, #48]	@ 0x30
 800182c:	e007      	b.n	800183e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 020f 	bic.w	r2, r2, #15
 800183c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	659a      	str	r2, [r3, #88]	@ 0x58
 800184e:	e007      	b.n	8001860 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	f043 0210 	orr.w	r2, r3, #16
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001860:	7ffb      	ldrb	r3, [r7, #31]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000
 8001870:	053e2d63 	.word	0x053e2d63
 8001874:	50040000 	.word	0x50040000
 8001878:	50040300 	.word	0x50040300
 800187c:	fff0c007 	.word	0xfff0c007

08001880 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fe77 	bl	8001580 <LL_ADC_REG_IsConversionOngoing>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d14f      	bne.n	8001938 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Start+0x26>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e04b      	b.n	800193e <HAL_ADC_Start+0xbe>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fdd0 	bl	8002454 <ADC_Enable>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d137      	bne.n	800192e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018de:	d106      	bne.n	80018ee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e4:	f023 0206 	bic.w	r2, r3, #6
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	221c      	movs	r2, #28
 80018fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800191a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fe02 	bl	8001530 <LL_ADC_REG_StartConversion>
 800192c:	e006      	b.n	800193c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001936:	e001      	b.n	800193c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001938:	2302      	movs	r3, #2
 800193a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_Stop+0x16>
 8001958:	2302      	movs	r3, #2
 800195a:	e023      	b.n	80019a4 <HAL_ADC_Stop+0x5e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001964:	2103      	movs	r1, #3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fcb8 	bl	80022dc <ADC_ConversionStop>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d111      	bne.n	800199a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fdf2 	bl	8002560 <ADC_Disable>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d102      	bne.n	80019c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019be:	2308      	movs	r3, #8
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e010      	b.n	80019e6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f043 0220 	orr.w	r2, r3, #32
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06f      	b.n	8001ac2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80019e2:	2304      	movs	r3, #4
 80019e4:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019e6:	f7ff fbd1 	bl	800118c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019ec:	e021      	b.n	8001a32 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019f4:	d01d      	beq.n	8001a32 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019f6:	f7ff fbc9 	bl	800118c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d302      	bcc.n	8001a0c <HAL_ADC_PollForConversion+0x60>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d112      	bne.n	8001a32 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10b      	bne.n	8001a32 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f043 0204 	orr.w	r2, r3, #4
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e047      	b.n	8001ac2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0d6      	beq.n	80019ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fc43 	bl	80012dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01c      	beq.n	8001a96 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7e5b      	ldrb	r3, [r3, #25]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d118      	bne.n	8001a96 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d111      	bne.n	8001a96 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d105      	bne.n	8001a96 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d104      	bne.n	8001aae <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e008      	b.n	8001ac0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	220c      	movs	r2, #12
 8001abe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x22>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e3d5      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x7ce>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fd34 	bl	8001580 <LL_ADC_REG_IsConversionOngoing>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 83ba 	bne.w	8002294 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d824      	bhi.n	8001b7a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	3b02      	subs	r3, #2
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d81b      	bhi.n	8001b72 <HAL_ADC_ConfigChannel+0x8e>
 8001b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <HAL_ADC_ConfigChannel+0x5c>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b59 	.word	0x08001b59
 8001b48:	08001b61 	.word	0x08001b61
 8001b4c:	08001b69 	.word	0x08001b69
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b50:	230c      	movs	r3, #12
 8001b52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b56:	e010      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001b58:	2312      	movs	r3, #18
 8001b5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b5e:	e00c      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001b60:	2318      	movs	r3, #24
 8001b62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b66:	e008      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b70:	e003      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001b72:	2306      	movs	r3, #6
 8001b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b78:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001b88:	f7ff fbbb 	bl	8001302 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fcf5 	bl	8001580 <LL_ADC_REG_IsConversionOngoing>
 8001b96:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fd15 	bl	80015ce <LL_ADC_INJ_IsConversionOngoing>
 8001ba4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 81bf 	bne.w	8001f30 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 81ba 	bne.w	8001f30 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001bc4:	d10f      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff fbc2 	bl	800135a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fb69 	bl	80012b6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001be4:	e00e      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff fbb1 	bl	800135a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb59 	bl	80012b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d00a      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6919      	ldr	r1, [r3, #16]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c36:	f7ff fae9 	bl	800120c <LL_ADC_SetOffset>
 8001c3a:	e179      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fb06 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10a      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x184>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fafb 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	0e9b      	lsrs	r3, r3, #26
 8001c62:	f003 021f 	and.w	r2, r3, #31
 8001c66:	e01e      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x1c2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff faf0 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e004      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001c9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x1da>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	0e9b      	lsrs	r3, r3, #26
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	e018      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x20c>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001cda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	e004      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d106      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fabf 	bl	8001280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff faa3 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10a      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x24a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fa98 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	0e9b      	lsrs	r3, r3, #26
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	e01e      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x288>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2101      	movs	r1, #1
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fa8d 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001d54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e004      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001d60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x2a0>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	0e9b      	lsrs	r3, r3, #26
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	e018      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x2d2>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001da8:	2320      	movs	r3, #32
 8001daa:	e004      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d106      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fa5c 	bl	8001280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fa40 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x310>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2102      	movs	r1, #2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fa35 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	e01e      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x34e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa2a 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001e22:	2320      	movs	r3, #32
 8001e24:	e004      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x366>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	e014      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x390>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001e58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e004      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d106      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f9fd 	bl	8001280 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff f9e1 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10a      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x3ce>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f9d6 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	e017      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x3fe>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f9cb 	bl	8001254 <LL_ADC_GetOffsetChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ecc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e003      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001ed8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x416>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	e011      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x43a>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001f08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001f0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001f12:	2320      	movs	r3, #32
 8001f14:	e003      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001f16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d106      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2200      	movs	r2, #0
 8001f28:	2103      	movs	r1, #3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f9a8 	bl	8001280 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fad5 	bl	80014e4 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 813f 	bne.w	80021c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff fa2e 	bl	80013b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4a8e      	ldr	r2, [pc, #568]	@ (8002194 <HAL_ADC_ConfigChannel+0x6b0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f040 8130 	bne.w	80021c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x4a4>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	3301      	adds	r3, #1
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2b09      	cmp	r3, #9
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	e019      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x4d8>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001f9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	e003      	b.n	8001fac <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001fa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	bf94      	ite	ls
 8001fb6:	2301      	movls	r3, #1
 8001fb8:	2300      	movhi	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d079      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d107      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x4f8>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	069b      	lsls	r3, r3, #26
 8001fd6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fda:	e015      	b.n	8002008 <HAL_ADC_ConfigChannel+0x524>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e003      	b.n	8002000 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	3301      	adds	r3, #1
 8002002:	069b      	lsls	r3, r3, #26
 8002004:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x544>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	3301      	adds	r3, #1
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	2101      	movs	r1, #1
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	e017      	b.n	8002058 <HAL_ADC_ConfigChannel+0x574>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002038:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800203a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e003      	b.n	800204c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	ea42 0103 	orr.w	r1, r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_ADC_ConfigChannel+0x59a>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	051b      	lsls	r3, r3, #20
 800207c:	e018      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x5cc>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800208c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800209a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b0:	430b      	orrs	r3, r1
 80020b2:	e080      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x5ec>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0e9b      	lsrs	r3, r3, #26
 80020c6:	3301      	adds	r3, #1
 80020c8:	069b      	lsls	r3, r3, #26
 80020ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ce:	e015      	b.n	80020fc <HAL_ADC_ConfigChannel+0x618>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80020e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80020e8:	2320      	movs	r3, #32
 80020ea:	e003      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80020ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	069b      	lsls	r3, r3, #26
 80020f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_ConfigChannel+0x638>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e9b      	lsrs	r3, r3, #26
 800210e:	3301      	adds	r3, #1
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2101      	movs	r1, #1
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	e017      	b.n	800214c <HAL_ADC_ConfigChannel+0x668>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	61bb      	str	r3, [r7, #24]
  return result;
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e003      	b.n	8002140 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	ea42 0103 	orr.w	r1, r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x694>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	3301      	adds	r3, #1
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	3b1e      	subs	r3, #30
 8002170:	051b      	lsls	r3, r3, #20
 8002172:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002176:	e01d      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x6d0>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	60fb      	str	r3, [r7, #12]
  return result;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d103      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e005      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x6bc>
 8002194:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	f003 021f 	and.w	r2, r3, #31
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	3b1e      	subs	r3, #30
 80021ae:	051b      	lsls	r3, r3, #20
 80021b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ba:	4619      	mov	r1, r3
 80021bc:	f7ff f8cd 	bl	800135a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b3d      	ldr	r3, [pc, #244]	@ (80022bc <HAL_ADC_ConfigChannel+0x7d8>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d06c      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021cc:	483c      	ldr	r0, [pc, #240]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7dc>)
 80021ce:	f7ff f80f 	bl	80011f0 <LL_ADC_GetCommonPathInternalCh>
 80021d2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a3a      	ldr	r2, [pc, #232]	@ (80022c4 <HAL_ADC_ConfigChannel+0x7e0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d127      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d121      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a35      	ldr	r2, [pc, #212]	@ (80022c8 <HAL_ADC_ConfigChannel+0x7e4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d157      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021fe:	4619      	mov	r1, r3
 8002200:	482f      	ldr	r0, [pc, #188]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002202:	f7fe ffe2 	bl	80011ca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002206:	4b31      	ldr	r3, [pc, #196]	@ (80022cc <HAL_ADC_ConfigChannel+0x7e8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	4a30      	ldr	r2, [pc, #192]	@ (80022d0 <HAL_ADC_ConfigChannel+0x7ec>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	099b      	lsrs	r3, r3, #6
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002220:	e002      	b.n	8002228 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3b01      	subs	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f9      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800222e:	e03a      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d113      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800223a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800223e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1f      	ldr	r2, [pc, #124]	@ (80022c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d12a      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002254:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002258:	4619      	mov	r1, r3
 800225a:	4819      	ldr	r0, [pc, #100]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800225c:	f7fe ffb5 	bl	80011ca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002260:	e021      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d11c      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800226c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002270:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d116      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a12      	ldr	r2, [pc, #72]	@ (80022c8 <HAL_ADC_ConfigChannel+0x7e4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d111      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002286:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800228a:	4619      	mov	r1, r3
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800228e:	f7fe ff9c 	bl	80011ca <LL_ADC_SetCommonPathInternalCh>
 8002292:	e008      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80022ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	37d8      	adds	r7, #216	@ 0xd8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	80080000 	.word	0x80080000
 80022c0:	50040300 	.word	0x50040300
 80022c4:	c7520000 	.word	0xc7520000
 80022c8:	50040000 	.word	0x50040000
 80022cc:	20000000 	.word	0x20000000
 80022d0:	053e2d63 	.word	0x053e2d63
 80022d4:	cb840000 	.word	0xcb840000
 80022d8:	80000001 	.word	0x80000001

080022dc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f944 	bl	8001580 <LL_ADC_REG_IsConversionOngoing>
 80022f8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f965 	bl	80015ce <LL_ADC_INJ_IsConversionOngoing>
 8002304:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d103      	bne.n	8002314 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8098 	beq.w	8002444 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02a      	beq.n	8002378 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7e5b      	ldrb	r3, [r3, #25]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d126      	bne.n	8002378 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7e1b      	ldrb	r3, [r3, #24]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d122      	bne.n	8002378 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002332:	2301      	movs	r3, #1
 8002334:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002336:	e014      	b.n	8002362 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4a45      	ldr	r2, [pc, #276]	@ (8002450 <ADC_ConversionStop+0x174>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d90d      	bls.n	800235c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e074      	b.n	8002446 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800236c:	2b40      	cmp	r3, #64	@ 0x40
 800236e:	d1e3      	bne.n	8002338 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2240      	movs	r2, #64	@ 0x40
 8002376:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d014      	beq.n	80023a8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f8fc 	bl	8001580 <LL_ADC_REG_IsConversionOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00c      	beq.n	80023a8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f8b9 	bl	800150a <LL_ADC_IsDisableOngoing>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d104      	bne.n	80023a8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f8d8 	bl	8001558 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d014      	beq.n	80023d8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f90b 	bl	80015ce <LL_ADC_INJ_IsConversionOngoing>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00c      	beq.n	80023d8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f8a1 	bl	800150a <LL_ADC_IsDisableOngoing>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d104      	bne.n	80023d8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f8e7 	bl	80015a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d005      	beq.n	80023ea <ADC_ConversionStop+0x10e>
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d105      	bne.n	80023f0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023e4:	230c      	movs	r3, #12
 80023e6:	617b      	str	r3, [r7, #20]
        break;
 80023e8:	e005      	b.n	80023f6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023ea:	2308      	movs	r3, #8
 80023ec:	617b      	str	r3, [r7, #20]
        break;
 80023ee:	e002      	b.n	80023f6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023f0:	2304      	movs	r3, #4
 80023f2:	617b      	str	r3, [r7, #20]
        break;
 80023f4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80023f6:	f7fe fec9 	bl	800118c <HAL_GetTick>
 80023fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023fc:	e01b      	b.n	8002436 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023fe:	f7fe fec5 	bl	800118c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b05      	cmp	r3, #5
 800240a:	d914      	bls.n	8002436 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241e:	f043 0210 	orr.w	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e007      	b.n	8002446 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1dc      	bne.n	80023fe <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	a33fffff 	.word	0xa33fffff

08002454 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800245c:	2300      	movs	r3, #0
 800245e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f83d 	bl	80014e4 <LL_ADC_IsEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d169      	bne.n	8002544 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <ADC_Enable+0xfc>)
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00d      	beq.n	800249a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e055      	b.n	8002546 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fff8 	bl	8001494 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024a4:	482b      	ldr	r0, [pc, #172]	@ (8002554 <ADC_Enable+0x100>)
 80024a6:	f7fe fea3 	bl	80011f0 <LL_ADC_GetCommonPathInternalCh>
 80024aa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b4:	4b28      	ldr	r3, [pc, #160]	@ (8002558 <ADC_Enable+0x104>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	4a28      	ldr	r2, [pc, #160]	@ (800255c <ADC_Enable+0x108>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024ce:	e002      	b.n	80024d6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f9      	bne.n	80024d0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024dc:	f7fe fe56 	bl	800118c <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024e2:	e028      	b.n	8002536 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe fffb 	bl	80014e4 <LL_ADC_IsEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe ffcb 	bl	8001494 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024fe:	f7fe fe45 	bl	800118c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d914      	bls.n	8002536 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d00d      	beq.n	8002536 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e007      	b.n	8002546 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d1cf      	bne.n	80024e4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	8000003f 	.word	0x8000003f
 8002554:	50040300 	.word	0x50040300
 8002558:	20000000 	.word	0x20000000
 800255c:	053e2d63 	.word	0x053e2d63

08002560 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe ffcc 	bl	800150a <LL_ADC_IsDisableOngoing>
 8002572:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe ffb3 	bl	80014e4 <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d047      	beq.n	8002614 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d144      	bne.n	8002614 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030d 	and.w	r3, r3, #13
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10c      	bne.n	80025b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe ff8d 	bl	80014bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2203      	movs	r2, #3
 80025a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025aa:	f7fe fdef 	bl	800118c <HAL_GetTick>
 80025ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025b0:	e029      	b.n	8002606 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b6:	f043 0210 	orr.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e023      	b.n	8002616 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025ce:	f7fe fddd 	bl	800118c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d914      	bls.n	8002606 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e007      	b.n	8002616 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1dc      	bne.n	80025ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <LL_ADC_StartCalibration>:
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002630:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800263a:	4313      	orrs	r3, r2
 800263c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_IsCalibrationOnGoing>:
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002664:	d101      	bne.n	800266a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_ADCEx_Calibration_Start+0x1c>
 8002690:	2302      	movs	r3, #2
 8002692:	e04d      	b.n	8002730 <HAL_ADCEx_Calibration_Start+0xb8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff5f 	bl	8002560 <ADC_Disable>
 80026a2:	4603      	mov	r3, r0
 80026a4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d136      	bne.n	800271a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026b4:	f023 0302 	bic.w	r3, r3, #2
 80026b8:	f043 0202 	orr.w	r2, r3, #2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffa9 	bl	800261e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026cc:	e014      	b.n	80026f8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3301      	adds	r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80026da:	d30d      	bcc.n	80026f8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	f023 0312 	bic.w	r3, r3, #18
 80026e4:	f043 0210 	orr.w	r2, r3, #16
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e01b      	b.n	8002730 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ffa7 	bl	8002650 <LL_ADC_IsCalibrationOnGoing>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e2      	bne.n	80026ce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	f023 0303 	bic.w	r3, r3, #3
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	659a      	str	r2, [r3, #88]	@ 0x58
 8002718:	e005      	b.n	8002726 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	@ (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	@ (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	@ (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	@ 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800287c:	f7ff ff8e 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff47 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff5c 	bl	8002780 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff8e 	bl	80027f0 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5d 	bl	800279c <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ffb0 	bl	8002858 <SysTick_Config>
 80028f8:	4603      	mov	r3, r0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002912:	e166      	b.n	8002be2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2101      	movs	r1, #1
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	4013      	ands	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8158 	beq.w	8002bdc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d005      	beq.n	8002944 <HAL_GPIO_Init+0x40>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d130      	bne.n	80029a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800297a:	2201      	movs	r2, #1
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0201 	and.w	r2, r3, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d017      	beq.n	80029e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d123      	bne.n	8002a36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	08da      	lsrs	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3208      	adds	r2, #8
 80029f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3208      	adds	r2, #8
 8002a30:	6939      	ldr	r1, [r7, #16]
 8002a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0203 	and.w	r2, r3, #3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80b2 	beq.w	8002bdc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a78:	4b61      	ldr	r3, [pc, #388]	@ (8002c00 <HAL_GPIO_Init+0x2fc>)
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7c:	4a60      	ldr	r2, [pc, #384]	@ (8002c00 <HAL_GPIO_Init+0x2fc>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a84:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <HAL_GPIO_Init+0x2fc>)
 8002a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a90:	4a5c      	ldr	r2, [pc, #368]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	3302      	adds	r3, #2
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002aba:	d02b      	beq.n	8002b14 <HAL_GPIO_Init+0x210>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a52      	ldr	r2, [pc, #328]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d025      	beq.n	8002b10 <HAL_GPIO_Init+0x20c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a51      	ldr	r2, [pc, #324]	@ (8002c0c <HAL_GPIO_Init+0x308>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d01f      	beq.n	8002b0c <HAL_GPIO_Init+0x208>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a50      	ldr	r2, [pc, #320]	@ (8002c10 <HAL_GPIO_Init+0x30c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d019      	beq.n	8002b08 <HAL_GPIO_Init+0x204>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a4f      	ldr	r2, [pc, #316]	@ (8002c14 <HAL_GPIO_Init+0x310>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d013      	beq.n	8002b04 <HAL_GPIO_Init+0x200>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a4e      	ldr	r2, [pc, #312]	@ (8002c18 <HAL_GPIO_Init+0x314>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00d      	beq.n	8002b00 <HAL_GPIO_Init+0x1fc>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8002c1c <HAL_GPIO_Init+0x318>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <HAL_GPIO_Init+0x1f8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a4c      	ldr	r2, [pc, #304]	@ (8002c20 <HAL_GPIO_Init+0x31c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_GPIO_Init+0x1f4>
 8002af4:	2307      	movs	r3, #7
 8002af6:	e00e      	b.n	8002b16 <HAL_GPIO_Init+0x212>
 8002af8:	2308      	movs	r3, #8
 8002afa:	e00c      	b.n	8002b16 <HAL_GPIO_Init+0x212>
 8002afc:	2306      	movs	r3, #6
 8002afe:	e00a      	b.n	8002b16 <HAL_GPIO_Init+0x212>
 8002b00:	2305      	movs	r3, #5
 8002b02:	e008      	b.n	8002b16 <HAL_GPIO_Init+0x212>
 8002b04:	2304      	movs	r3, #4
 8002b06:	e006      	b.n	8002b16 <HAL_GPIO_Init+0x212>
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e004      	b.n	8002b16 <HAL_GPIO_Init+0x212>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e002      	b.n	8002b16 <HAL_GPIO_Init+0x212>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_GPIO_Init+0x212>
 8002b14:	2300      	movs	r3, #0
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	f002 0203 	and.w	r2, r2, #3
 8002b1c:	0092      	lsls	r2, r2, #2
 8002b1e:	4093      	lsls	r3, r2
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b26:	4937      	ldr	r1, [pc, #220]	@ (8002c04 <HAL_GPIO_Init+0x300>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b34:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b58:	4a32      	ldr	r2, [pc, #200]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b5e:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b82:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b88:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bac:	4a1d      	ldr	r2, [pc, #116]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bd6:	4a13      	ldr	r2, [pc, #76]	@ (8002c24 <HAL_GPIO_Init+0x320>)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f ae91 	bne.w	8002914 <HAL_GPIO_Init+0x10>
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010000 	.word	0x40010000
 8002c08:	48000400 	.word	0x48000400
 8002c0c:	48000800 	.word	0x48000800
 8002c10:	48000c00 	.word	0x48000c00
 8002c14:	48001000 	.word	0x48001000
 8002c18:	48001400 	.word	0x48001400
 8002c1c:	48001800 	.word	0x48001800
 8002c20:	48001c00 	.word	0x48001c00
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e001      	b.n	8002c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
 8002c64:	4613      	mov	r3, r2
 8002c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c68:	787b      	ldrb	r3, [r7, #1]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c98:	d102      	bne.n	8002ca0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c9e:	e00b      	b.n	8002cb8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cae:	d102      	bne.n	8002cb6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cb4:	e000      	b.n	8002cb8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002cb6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d141      	bne.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce2:	d131      	bne.n	8002d48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ce4:	4b47      	ldr	r3, [pc, #284]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cea:	4a46      	ldr	r2, [pc, #280]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf4:	4b43      	ldr	r3, [pc, #268]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cfc:	4a41      	ldr	r2, [pc, #260]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d04:	4b40      	ldr	r3, [pc, #256]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2232      	movs	r2, #50	@ 0x32
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	0c9b      	lsrs	r3, r3, #18
 8002d16:	3301      	adds	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1a:	e002      	b.n	8002d22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d22:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2e:	d102      	bne.n	8002d36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f2      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d36:	4b33      	ldr	r3, [pc, #204]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d158      	bne.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e057      	b.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d48:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d58:	e04d      	b.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d60:	d141      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d62:	4b28      	ldr	r3, [pc, #160]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6e:	d131      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d70:	4b24      	ldr	r3, [pc, #144]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d76:	4a23      	ldr	r2, [pc, #140]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d80:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d88:	4a1e      	ldr	r2, [pc, #120]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2232      	movs	r2, #50	@ 0x32
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	0c9b      	lsrs	r3, r3, #18
 8002da2:	3301      	adds	r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da6:	e002      	b.n	8002dae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dba:	d102      	bne.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f2      	bne.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dc2:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dce:	d112      	bne.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e011      	b.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002de4:	e007      	b.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002de6:	4b07      	ldr	r3, [pc, #28]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dee:	4a05      	ldr	r2, [pc, #20]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002df4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40007000 	.word	0x40007000
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	431bde83 	.word	0x431bde83

08002e10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f000 bc08 	b.w	8003634 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e24:	4b96      	ldr	r3, [pc, #600]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e2e:	4b94      	ldr	r3, [pc, #592]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80e4 	beq.w	800300e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4c>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	f040 808b 	bne.w	8002f6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	f040 8087 	bne.w	8002f6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e5c:	4b88      	ldr	r3, [pc, #544]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x64>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e3df      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1a      	ldr	r2, [r3, #32]
 8002e78:	4b81      	ldr	r3, [pc, #516]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_RCC_OscConfig+0x7e>
 8002e84:	4b7e      	ldr	r3, [pc, #504]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8c:	e005      	b.n	8002e9a <HAL_RCC_OscConfig+0x8a>
 8002e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d223      	bcs.n	8002ee6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fd94 	bl	80039d0 <RCC_SetFlashLatencyFromMSIRange>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e3c0      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb2:	4b73      	ldr	r3, [pc, #460]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a72      	ldr	r2, [pc, #456]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	f043 0308 	orr.w	r3, r3, #8
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b70      	ldr	r3, [pc, #448]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	496d      	ldr	r1, [pc, #436]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed0:	4b6b      	ldr	r3, [pc, #428]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	4968      	ldr	r1, [pc, #416]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
 8002ee4:	e025      	b.n	8002f32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee6:	4b66      	ldr	r3, [pc, #408]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a65      	ldr	r2, [pc, #404]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b63      	ldr	r3, [pc, #396]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4960      	ldr	r1, [pc, #384]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f04:	4b5e      	ldr	r3, [pc, #376]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	495b      	ldr	r1, [pc, #364]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fd54 	bl	80039d0 <RCC_SetFlashLatencyFromMSIRange>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e380      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f32:	f000 fcc1 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b51      	ldr	r3, [pc, #324]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	4950      	ldr	r1, [pc, #320]	@ (8003084 <HAL_RCC_OscConfig+0x274>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8003088 <HAL_RCC_OscConfig+0x278>)
 8002f50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f52:	4b4e      	ldr	r3, [pc, #312]	@ (800308c <HAL_RCC_OscConfig+0x27c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe f8c8 	bl	80010ec <HAL_InitTick>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d052      	beq.n	800300c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	e364      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d032      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f72:	4b43      	ldr	r3, [pc, #268]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a42      	ldr	r2, [pc, #264]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe f905 	bl	800118c <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f86:	f7fe f901 	bl	800118c <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e34d      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f98:	4b39      	ldr	r3, [pc, #228]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa4:	4b36      	ldr	r3, [pc, #216]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a35      	ldr	r2, [pc, #212]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002faa:	f043 0308 	orr.w	r3, r3, #8
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b33      	ldr	r3, [pc, #204]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4930      	ldr	r1, [pc, #192]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	492b      	ldr	r1, [pc, #172]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
 8002fd6:	e01a      	b.n	800300e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fd8:	4b29      	ldr	r3, [pc, #164]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a28      	ldr	r2, [pc, #160]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe f8d2 	bl	800118c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fec:	f7fe f8ce 	bl	800118c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e31a      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ffe:	4b20      	ldr	r3, [pc, #128]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x1dc>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d073      	beq.n	8003102 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d005      	beq.n	800302c <HAL_RCC_OscConfig+0x21c>
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d10e      	bne.n	8003044 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d10b      	bne.n	8003044 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d063      	beq.n	8003100 <HAL_RCC_OscConfig+0x2f0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d15f      	bne.n	8003100 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e2f7      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x24c>
 800304e:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a0b      	ldr	r2, [pc, #44]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e025      	b.n	80030a8 <HAL_RCC_OscConfig+0x298>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003064:	d114      	bne.n	8003090 <HAL_RCC_OscConfig+0x280>
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b03      	ldr	r3, [pc, #12]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a02      	ldr	r2, [pc, #8]	@ (8003080 <HAL_RCC_OscConfig+0x270>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e013      	b.n	80030a8 <HAL_RCC_OscConfig+0x298>
 8003080:	40021000 	.word	0x40021000
 8003084:	080045f0 	.word	0x080045f0
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004
 8003090:	4ba0      	ldr	r3, [pc, #640]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a9f      	ldr	r2, [pc, #636]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b9d      	ldr	r3, [pc, #628]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a9c      	ldr	r2, [pc, #624]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80030a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d013      	beq.n	80030d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe f86c 	bl	800118c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fe f868 	bl	800118c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	@ 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e2b4      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ca:	4b92      	ldr	r3, [pc, #584]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x2a8>
 80030d6:	e014      	b.n	8003102 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fe f858 	bl	800118c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe f854 	bl	800118c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	@ 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e2a0      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030f2:	4b88      	ldr	r3, [pc, #544]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2d0>
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d060      	beq.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d005      	beq.n	8003120 <HAL_RCC_OscConfig+0x310>
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d119      	bne.n	800314e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d116      	bne.n	800314e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003120:	4b7c      	ldr	r3, [pc, #496]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_OscConfig+0x328>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e27d      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003138:	4b76      	ldr	r3, [pc, #472]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	4973      	ldr	r1, [pc, #460]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800314c:	e040      	b.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d023      	beq.n	800319e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003156:	4b6f      	ldr	r3, [pc, #444]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6e      	ldr	r2, [pc, #440]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe f813 	bl	800118c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316a:	f7fe f80f 	bl	800118c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e25b      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317c:	4b65      	ldr	r3, [pc, #404]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b62      	ldr	r3, [pc, #392]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	495f      	ldr	r1, [pc, #380]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]
 800319c:	e018      	b.n	80031d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319e:	4b5d      	ldr	r3, [pc, #372]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80031a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031aa:	f7fd ffef 	bl	800118c <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b2:	f7fd ffeb 	bl	800118c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e237      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c4:	4b53      	ldr	r3, [pc, #332]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d03c      	beq.n	8003256 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01c      	beq.n	800321e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fd ffca 	bl	800118c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fc:	f7fd ffc6 	bl	800118c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e212      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320e:	4b41      	ldr	r3, [pc, #260]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ef      	beq.n	80031fc <HAL_RCC_OscConfig+0x3ec>
 800321c:	e01b      	b.n	8003256 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321e:	4b3d      	ldr	r3, [pc, #244]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003224:	4a3b      	ldr	r2, [pc, #236]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fd ffad 	bl	800118c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003236:	f7fd ffa9 	bl	800118c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e1f5      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003248:	4b32      	ldr	r3, [pc, #200]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1ef      	bne.n	8003236 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80a6 	beq.w	80033b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003268:	4b2a      	ldr	r3, [pc, #168]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10d      	bne.n	8003290 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003274:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003278:	4a26      	ldr	r2, [pc, #152]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003280:	4b24      	ldr	r3, [pc, #144]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800328c:	2301      	movs	r3, #1
 800328e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003290:	4b21      	ldr	r3, [pc, #132]	@ (8003318 <HAL_RCC_OscConfig+0x508>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d118      	bne.n	80032ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800329c:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <HAL_RCC_OscConfig+0x508>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003318 <HAL_RCC_OscConfig+0x508>)
 80032a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a8:	f7fd ff70 	bl	800118c <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fd ff6c 	bl	800118c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1b8      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c2:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <HAL_RCC_OscConfig+0x508>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d108      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4d8>
 80032d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032e6:	e029      	b.n	800333c <HAL_RCC_OscConfig+0x52c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b05      	cmp	r3, #5
 80032ee:	d115      	bne.n	800331c <HAL_RCC_OscConfig+0x50c>
 80032f0:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f6:	4a07      	ldr	r2, [pc, #28]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003306:	4a03      	ldr	r2, [pc, #12]	@ (8003314 <HAL_RCC_OscConfig+0x504>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003310:	e014      	b.n	800333c <HAL_RCC_OscConfig+0x52c>
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	40007000 	.word	0x40007000
 800331c:	4b9d      	ldr	r3, [pc, #628]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003322:	4a9c      	ldr	r2, [pc, #624]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800332c:	4b99      	ldr	r3, [pc, #612]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	4a98      	ldr	r2, [pc, #608]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d016      	beq.n	8003372 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fd ff22 	bl	800118c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fd ff1e 	bl	800118c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e168      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003362:	4b8c      	ldr	r3, [pc, #560]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ed      	beq.n	800334c <HAL_RCC_OscConfig+0x53c>
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fd ff0b 	bl	800118c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd ff07 	bl	800118c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e151      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003390:	4b80      	ldr	r3, [pc, #512]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ed      	bne.n	800337a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339e:	7ffb      	ldrb	r3, [r7, #31]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a8:	4a7a      	ldr	r2, [pc, #488]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80033aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d03c      	beq.n	8003436 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01c      	beq.n	80033fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033c4:	4b73      	ldr	r3, [pc, #460]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80033c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ca:	4a72      	ldr	r2, [pc, #456]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7fd feda 	bl	800118c <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033dc:	f7fd fed6 	bl	800118c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e122      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ee:	4b69      	ldr	r3, [pc, #420]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80033f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <HAL_RCC_OscConfig+0x5cc>
 80033fc:	e01b      	b.n	8003436 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033fe:	4b65      	ldr	r3, [pc, #404]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003404:	4a63      	ldr	r2, [pc, #396]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fd febd 	bl	800118c <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003416:	f7fd feb9 	bl	800118c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e105      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003428:	4b5a      	ldr	r3, [pc, #360]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 800342a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ef      	bne.n	8003416 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80f9 	beq.w	8003632 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	2b02      	cmp	r3, #2
 8003446:	f040 80cf 	bne.w	80035e8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800344a:	4b52      	ldr	r3, [pc, #328]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0203 	and.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345a:	429a      	cmp	r2, r3
 800345c:	d12c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	3b01      	subs	r3, #1
 800346a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d123      	bne.n	80034b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d11b      	bne.n	80034b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d113      	bne.n	80034b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	3b01      	subs	r3, #1
 800349e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d109      	bne.n	80034b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	3b01      	subs	r3, #1
 80034b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d071      	beq.n	800359c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d068      	beq.n	8003590 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034be:	4b35      	ldr	r3, [pc, #212]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034ca:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0ac      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034da:	4b2e      	ldr	r3, [pc, #184]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2d      	ldr	r2, [pc, #180]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 80034e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e6:	f7fd fe51 	bl	800118c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fd fe4d 	bl	800118c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e099      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003500:	4b24      	ldr	r3, [pc, #144]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	4b21      	ldr	r3, [pc, #132]	@ (8003598 <HAL_RCC_OscConfig+0x788>)
 8003512:	4013      	ands	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800351c:	3a01      	subs	r2, #1
 800351e:	0112      	lsls	r2, r2, #4
 8003520:	4311      	orrs	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003526:	0212      	lsls	r2, r2, #8
 8003528:	4311      	orrs	r1, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800352e:	0852      	lsrs	r2, r2, #1
 8003530:	3a01      	subs	r2, #1
 8003532:	0552      	lsls	r2, r2, #21
 8003534:	4311      	orrs	r1, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800353a:	0852      	lsrs	r2, r2, #1
 800353c:	3a01      	subs	r2, #1
 800353e:	0652      	lsls	r2, r2, #25
 8003540:	4311      	orrs	r1, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003546:	06d2      	lsls	r2, r2, #27
 8003548:	430a      	orrs	r2, r1
 800354a:	4912      	ldr	r1, [pc, #72]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 800354c:	4313      	orrs	r3, r2
 800354e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003550:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0f      	ldr	r2, [pc, #60]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800355a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800355c:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a0c      	ldr	r2, [pc, #48]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003566:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003568:	f7fd fe10 	bl	800118c <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fd fe0c 	bl	800118c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e058      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <HAL_RCC_OscConfig+0x784>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800358e:	e050      	b.n	8003632 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e04f      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
 8003594:	40021000 	.word	0x40021000
 8003598:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359c:	4b27      	ldr	r3, [pc, #156]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d144      	bne.n	8003632 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035a8:	4b24      	ldr	r3, [pc, #144]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a23      	ldr	r2, [pc, #140]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b4:	4b21      	ldr	r3, [pc, #132]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4a20      	ldr	r2, [pc, #128]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035c0:	f7fd fde4 	bl	800118c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd fde0 	bl	800118c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e02c      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035da:	4b18      	ldr	r3, [pc, #96]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x7b8>
 80035e6:	e024      	b.n	8003632 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d01f      	beq.n	800362e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b13      	ldr	r3, [pc, #76]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a12      	ldr	r2, [pc, #72]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 80035f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fd fdc7 	bl	800118c <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fd fdc3 	bl	800118c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e00f      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f0      	bne.n	8003602 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	4905      	ldr	r1, [pc, #20]	@ (800363c <HAL_RCC_OscConfig+0x82c>)
 8003626:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <HAL_RCC_OscConfig+0x830>)
 8003628:	4013      	ands	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
 800362c:	e001      	b.n	8003632 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	feeefffc 	.word	0xfeeefffc

08003644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e11d      	b.n	8003898 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800365c:	4b90      	ldr	r3, [pc, #576]	@ (80038a0 <HAL_RCC_ClockConfig+0x25c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d910      	bls.n	800368c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b8d      	ldr	r3, [pc, #564]	@ (80038a0 <HAL_RCC_ClockConfig+0x25c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 020f 	bic.w	r2, r3, #15
 8003672:	498b      	ldr	r1, [pc, #556]	@ (80038a0 <HAL_RCC_ClockConfig+0x25c>)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b89      	ldr	r3, [pc, #548]	@ (80038a0 <HAL_RCC_ClockConfig+0x25c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e105      	b.n	8003898 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d010      	beq.n	80036ba <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	4b81      	ldr	r3, [pc, #516]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d908      	bls.n	80036ba <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b7e      	ldr	r3, [pc, #504]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	497b      	ldr	r1, [pc, #492]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d079      	beq.n	80037ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d11e      	bne.n	800370c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	4b75      	ldr	r3, [pc, #468]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0dc      	b.n	8003898 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80036de:	f000 f9d1 	bl	8003a84 <RCC_GetSysClockFreqFromPLLSource>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4a70      	ldr	r2, [pc, #448]	@ (80038a8 <HAL_RCC_ClockConfig+0x264>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d946      	bls.n	8003778 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80036ea:	4b6e      	ldr	r3, [pc, #440]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d140      	bne.n	8003778 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036f6:	4b6b      	ldr	r3, [pc, #428]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036fe:	4a69      	ldr	r2, [pc, #420]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003704:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e035      	b.n	8003778 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d107      	bne.n	8003724 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003714:	4b63      	ldr	r3, [pc, #396]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d115      	bne.n	800374c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0b9      	b.n	8003898 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d107      	bne.n	800373c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800372c:	4b5d      	ldr	r3, [pc, #372]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0ad      	b.n	8003898 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373c:	4b59      	ldr	r3, [pc, #356]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0a5      	b.n	8003898 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800374c:	f000 f8b4 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003750:	4603      	mov	r3, r0
 8003752:	4a55      	ldr	r2, [pc, #340]	@ (80038a8 <HAL_RCC_ClockConfig+0x264>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d90f      	bls.n	8003778 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003758:	4b52      	ldr	r3, [pc, #328]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003764:	4b4f      	ldr	r3, [pc, #316]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800376c:	4a4d      	ldr	r2, [pc, #308]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 800376e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003772:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003774:	2380      	movs	r3, #128	@ 0x80
 8003776:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003778:	4b4a      	ldr	r3, [pc, #296]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 0203 	bic.w	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4947      	ldr	r1, [pc, #284]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378a:	f7fd fcff 	bl	800118c <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003792:	f7fd fcfb 	bl	800118c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e077      	b.n	8003898 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a8:	4b3e      	ldr	r3, [pc, #248]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 020c 	and.w	r2, r3, #12
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d1eb      	bne.n	8003792 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b80      	cmp	r3, #128	@ 0x80
 80037be:	d105      	bne.n	80037cc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037c0:	4b38      	ldr	r3, [pc, #224]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4a37      	ldr	r2, [pc, #220]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80037c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ca:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4b31      	ldr	r3, [pc, #196]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d208      	bcs.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e8:	4b2e      	ldr	r3, [pc, #184]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	492b      	ldr	r1, [pc, #172]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037fa:	4b29      	ldr	r3, [pc, #164]	@ (80038a0 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d210      	bcs.n	800382a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003808:	4b25      	ldr	r3, [pc, #148]	@ (80038a0 <HAL_RCC_ClockConfig+0x25c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 020f 	bic.w	r2, r3, #15
 8003810:	4923      	ldr	r1, [pc, #140]	@ (80038a0 <HAL_RCC_ClockConfig+0x25c>)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003818:	4b21      	ldr	r3, [pc, #132]	@ (80038a0 <HAL_RCC_ClockConfig+0x25c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d001      	beq.n	800382a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e036      	b.n	8003898 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003836:	4b1b      	ldr	r3, [pc, #108]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4918      	ldr	r1, [pc, #96]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003844:	4313      	orrs	r3, r2
 8003846:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003854:	4b13      	ldr	r3, [pc, #76]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4910      	ldr	r1, [pc, #64]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003864:	4313      	orrs	r3, r2
 8003866:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003868:	f000 f826 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <HAL_RCC_ClockConfig+0x260>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 030f 	and.w	r3, r3, #15
 8003878:	490c      	ldr	r1, [pc, #48]	@ (80038ac <HAL_RCC_ClockConfig+0x268>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
 8003884:	4a0a      	ldr	r2, [pc, #40]	@ (80038b0 <HAL_RCC_ClockConfig+0x26c>)
 8003886:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_RCC_ClockConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fc2d 	bl	80010ec <HAL_InitTick>
 8003892:	4603      	mov	r3, r0
 8003894:	73fb      	strb	r3, [r7, #15]

  return status;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40021000 	.word	0x40021000
 80038a8:	04c4b400 	.word	0x04c4b400
 80038ac:	080045f0 	.word	0x080045f0
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c6:	4b3e      	ldr	r3, [pc, #248]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d0:	4b3b      	ldr	r3, [pc, #236]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x34>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d121      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d11e      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038ec:	4b34      	ldr	r3, [pc, #208]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038f8:	4b31      	ldr	r3, [pc, #196]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e005      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003908:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003914:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b04      	cmp	r3, #4
 800392e:	d102      	bne.n	8003936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003930:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e004      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d101      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800393c:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x114>)
 800393e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d134      	bne.n	80039b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003946:	4b1e      	ldr	r3, [pc, #120]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d003      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0xa6>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d003      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0xac>
 800395c:	e005      	b.n	800396a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003960:	617b      	str	r3, [r7, #20]
      break;
 8003962:	e005      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003966:	617b      	str	r3, [r7, #20]
      break;
 8003968:	e002      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	617b      	str	r3, [r7, #20]
      break;
 800396e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003970:	4b13      	ldr	r3, [pc, #76]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3301      	adds	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	fb03 f202 	mul.w	r2, r3, r2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003996:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	0e5b      	lsrs	r3, r3, #25
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	3301      	adds	r3, #1
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039b0:	69bb      	ldr	r3, [r7, #24]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	@ 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08004600 	.word	0x08004600
 80039c8:	00f42400 	.word	0x00f42400
 80039cc:	007a1200 	.word	0x007a1200

080039d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039dc:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039e8:	f7ff f94e 	bl	8002c88 <HAL_PWREx_GetVoltageRange>
 80039ec:	6178      	str	r0, [r7, #20]
 80039ee:	e014      	b.n	8003a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b22      	ldr	r3, [pc, #136]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	4a21      	ldr	r2, [pc, #132]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80039fc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a08:	f7ff f93e 	bl	8002c88 <HAL_PWREx_GetVoltageRange>
 8003a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	4a1a      	ldr	r2, [pc, #104]	@ (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a20:	d10b      	bne.n	8003a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b80      	cmp	r3, #128	@ 0x80
 8003a26:	d913      	bls.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a2c:	d902      	bls.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a2e:	2302      	movs	r3, #2
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	e00d      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a34:	2301      	movs	r3, #1
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e00a      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a3e:	d902      	bls.n	8003a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003a40:	2302      	movs	r3, #2
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	e004      	b.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b70      	cmp	r3, #112	@ 0x70
 8003a4a:	d101      	bne.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 020f 	bic.w	r2, r3, #15
 8003a58:	4909      	ldr	r1, [pc, #36]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a60:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40022000 	.word	0x40022000

08003a84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d00b      	beq.n	8003ab2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d825      	bhi.n	8003aec <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d008      	beq.n	8003ab8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d11f      	bne.n	8003aec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003aac:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003aae:	613b      	str	r3, [r7, #16]
    break;
 8003ab0:	e01f      	b.n	8003af2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003ab2:	4b25      	ldr	r3, [pc, #148]	@ (8003b48 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ab4:	613b      	str	r3, [r7, #16]
    break;
 8003ab6:	e01c      	b.n	8003af2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ab8:	4b21      	ldr	r3, [pc, #132]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e005      	b.n	8003ae0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b4c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae8:	613b      	str	r3, [r7, #16]
    break;
 8003aea:	e002      	b.n	8003af2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	613b      	str	r3, [r7, #16]
    break;
 8003af0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003af2:	4b13      	ldr	r3, [pc, #76]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	3301      	adds	r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b00:	4b0f      	ldr	r3, [pc, #60]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	fb03 f202 	mul.w	r2, r3, r2
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	0e5b      	lsrs	r3, r3, #25
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	3301      	adds	r3, #1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003b32:	683b      	ldr	r3, [r7, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40021000 	.word	0x40021000
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	007a1200 	.word	0x007a1200
 8003b4c:	08004600 	.word	0x08004600

08003b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d040      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b70:	2b80      	cmp	r3, #128	@ 0x80
 8003b72:	d02a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b74:	2b80      	cmp	r3, #128	@ 0x80
 8003b76:	d825      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b78:	2b60      	cmp	r3, #96	@ 0x60
 8003b7a:	d026      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b7c:	2b60      	cmp	r3, #96	@ 0x60
 8003b7e:	d821      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b80:	2b40      	cmp	r3, #64	@ 0x40
 8003b82:	d006      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d81d      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b90:	e018      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b92:	4b89      	ldr	r3, [pc, #548]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	4a88      	ldr	r2, [pc, #544]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b9e:	e015      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fb02 	bl	80041b0 <RCCEx_PLLSAI1_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb0:	e00c      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3320      	adds	r3, #32
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fbed 	bl	8004398 <RCCEx_PLLSAI2_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc2:	e003      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	74fb      	strb	r3, [r7, #19]
      break;
 8003bc8:	e000      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10b      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bd2:	4b79      	ldr	r3, [pc, #484]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bd8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be0:	4975      	ldr	r1, [pc, #468]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003be8:	e001      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	7cfb      	ldrb	r3, [r7, #19]
 8003bec:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d047      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c02:	d030      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c08:	d82a      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c0e:	d02a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003c10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c14:	d824      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c20:	d81e      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003c2c:	e018      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c2e:	4b62      	ldr	r3, [pc, #392]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	4a61      	ldr	r2, [pc, #388]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c38:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c3a:	e015      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fab4 	bl	80041b0 <RCCEx_PLLSAI1_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c4c:	e00c      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3320      	adds	r3, #32
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fb9f 	bl	8004398 <RCCEx_PLLSAI2_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c5e:	e003      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	74fb      	strb	r3, [r7, #19]
      break;
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c6e:	4b52      	ldr	r3, [pc, #328]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	494e      	ldr	r1, [pc, #312]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003c84:	e001      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 809f 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c9c:	4b46      	ldr	r3, [pc, #280]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	4b41      	ldr	r3, [pc, #260]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb6:	4a40      	ldr	r2, [pc, #256]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cce:	4b3b      	ldr	r3, [pc, #236]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cda:	f7fd fa57 	bl	800118c <HAL_GetTick>
 8003cde:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ce0:	e009      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fd fa53 	bl	800118c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d902      	bls.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	74fb      	strb	r3, [r7, #19]
        break;
 8003cf4:	e005      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf6:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ef      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d15b      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d08:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d12:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01f      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d019      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d26:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d32:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	4a1f      	ldr	r2, [pc, #124]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d42:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d48:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d52:	4a19      	ldr	r2, [pc, #100]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d016      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fd fa12 	bl	800118c <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7fd fa0e 	bl	800118c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d902      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	74fb      	strb	r3, [r7, #19]
            break;
 8003d82:	e006      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d84:	4b0c      	ldr	r3, [pc, #48]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ec      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d92:	7cfb      	ldrb	r3, [r7, #19]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10c      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d98:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da8:	4903      	ldr	r1, [pc, #12]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003db0:	e008      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	74bb      	strb	r3, [r7, #18]
 8003db6:	e005      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc4:	7c7b      	ldrb	r3, [r7, #17]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4ba0      	ldr	r3, [pc, #640]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	4a9f      	ldr	r2, [pc, #636]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dd4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003de2:	4b9a      	ldr	r3, [pc, #616]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f023 0203 	bic.w	r2, r3, #3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df0:	4996      	ldr	r1, [pc, #600]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e04:	4b91      	ldr	r3, [pc, #580]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f023 020c 	bic.w	r2, r3, #12
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	498e      	ldr	r1, [pc, #568]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e26:	4b89      	ldr	r3, [pc, #548]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e34:	4985      	ldr	r1, [pc, #532]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e48:	4b80      	ldr	r3, [pc, #512]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e56:	497d      	ldr	r1, [pc, #500]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e6a:	4b78      	ldr	r3, [pc, #480]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e78:	4974      	ldr	r1, [pc, #464]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9a:	496c      	ldr	r1, [pc, #432]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eae:	4b67      	ldr	r3, [pc, #412]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ebc:	4963      	ldr	r1, [pc, #396]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ede:	495b      	ldr	r1, [pc, #364]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef2:	4b56      	ldr	r3, [pc, #344]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f00:	4952      	ldr	r1, [pc, #328]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f14:	4b4d      	ldr	r3, [pc, #308]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	494a      	ldr	r1, [pc, #296]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f36:	4b45      	ldr	r3, [pc, #276]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f44:	4941      	ldr	r1, [pc, #260]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f58:	4b3c      	ldr	r3, [pc, #240]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f5e:	f023 0203 	bic.w	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f66:	4939      	ldr	r1, [pc, #228]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d028      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f7a:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f88:	4930      	ldr	r1, [pc, #192]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fa4:	60d3      	str	r3, [r2, #12]
 8003fa6:	e011      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f8f9 	bl	80041b0 <RCCEx_PLLSAI1_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d04d      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe0:	d108      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fe8:	4a18      	ldr	r2, [pc, #96]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003ff2:	e012      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003ff4:	4b15      	ldr	r3, [pc, #84]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ffa:	4a14      	ldr	r2, [pc, #80]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ffc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004000:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004004:	4b11      	ldr	r3, [pc, #68]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004012:	490e      	ldr	r1, [pc, #56]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004022:	d106      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004024:	4b09      	ldr	r3, [pc, #36]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a08      	ldr	r2, [pc, #32]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800402e:	60d3      	str	r3, [r2, #12]
 8004030:	e020      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800403a:	d109      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800403c:	4b03      	ldr	r3, [pc, #12]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a02      	ldr	r2, [pc, #8]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004046:	60d3      	str	r3, [r2, #12]
 8004048:	e014      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004054:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004058:	d10c      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 f8a5 	bl	80041b0 <RCCEx_PLLSAI1_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406a:	7cfb      	ldrb	r3, [r7, #19]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d028      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004080:	4b4a      	ldr	r3, [pc, #296]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800408e:	4947      	ldr	r1, [pc, #284]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800409a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800409e:	d106      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a0:	4b42      	ldr	r3, [pc, #264]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4a41      	ldr	r2, [pc, #260]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040aa:	60d3      	str	r3, [r2, #12]
 80040ac:	e011      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040b6:	d10c      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	2101      	movs	r1, #1
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f876 	bl	80041b0 <RCCEx_PLLSAI1_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01e      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040de:	4b33      	ldr	r3, [pc, #204]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ee:	492f      	ldr	r1, [pc, #188]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004100:	d10c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f851 	bl	80041b0 <RCCEx_PLLSAI1_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004128:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800412e:	f023 0204 	bic.w	r2, r3, #4
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004138:	491c      	ldr	r1, [pc, #112]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800414c:	4b17      	ldr	r3, [pc, #92]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004152:	f023 0218 	bic.w	r2, r3, #24
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415c:	4913      	ldr	r1, [pc, #76]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d017      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004170:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004172:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004176:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004180:	490a      	ldr	r1, [pc, #40]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800418e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004192:	d105      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800419e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000

080041b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041be:	4b72      	ldr	r3, [pc, #456]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00e      	beq.n	80041e8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0203 	and.w	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d103      	bne.n	80041e2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
       ||
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d142      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e03f      	b.n	8004268 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d018      	beq.n	8004222 <RCCEx_PLLSAI1_Config+0x72>
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d825      	bhi.n	8004240 <RCCEx_PLLSAI1_Config+0x90>
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d002      	beq.n	80041fe <RCCEx_PLLSAI1_Config+0x4e>
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d009      	beq.n	8004210 <RCCEx_PLLSAI1_Config+0x60>
 80041fc:	e020      	b.n	8004240 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041fe:	4b62      	ldr	r3, [pc, #392]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d11d      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420e:	e01a      	b.n	8004246 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004210:	4b5d      	ldr	r3, [pc, #372]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d116      	bne.n	800424a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004220:	e013      	b.n	800424a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004222:	4b59      	ldr	r3, [pc, #356]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800422e:	4b56      	ldr	r3, [pc, #344]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800423e:	e006      	b.n	800424e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	e004      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800424e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d108      	bne.n	8004268 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004256:	4b4c      	ldr	r3, [pc, #304]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 0203 	bic.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4949      	ldr	r1, [pc, #292]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 8086 	bne.w	800437c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004270:	4b45      	ldr	r3, [pc, #276]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a44      	ldr	r2, [pc, #272]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800427a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427c:	f7fc ff86 	bl	800118c <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004282:	e009      	b.n	8004298 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004284:	f7fc ff82 	bl	800118c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d902      	bls.n	8004298 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	73fb      	strb	r3, [r7, #15]
        break;
 8004296:	e005      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004298:	4b3b      	ldr	r3, [pc, #236]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ef      	bne.n	8004284 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d168      	bne.n	800437c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d113      	bne.n	80042d8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b0:	4b35      	ldr	r3, [pc, #212]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	4b35      	ldr	r3, [pc, #212]	@ (800438c <RCCEx_PLLSAI1_Config+0x1dc>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	0211      	lsls	r1, r2, #8
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	06d2      	lsls	r2, r2, #27
 80042c4:	4311      	orrs	r1, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6852      	ldr	r2, [r2, #4]
 80042ca:	3a01      	subs	r2, #1
 80042cc:	0112      	lsls	r2, r2, #4
 80042ce:	430a      	orrs	r2, r1
 80042d0:	492d      	ldr	r1, [pc, #180]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	610b      	str	r3, [r1, #16]
 80042d6:	e02d      	b.n	8004334 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d115      	bne.n	800430a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042de:	4b2a      	ldr	r3, [pc, #168]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004390 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6892      	ldr	r2, [r2, #8]
 80042ea:	0211      	lsls	r1, r2, #8
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6912      	ldr	r2, [r2, #16]
 80042f0:	0852      	lsrs	r2, r2, #1
 80042f2:	3a01      	subs	r2, #1
 80042f4:	0552      	lsls	r2, r2, #21
 80042f6:	4311      	orrs	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6852      	ldr	r2, [r2, #4]
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	430a      	orrs	r2, r1
 8004302:	4921      	ldr	r1, [pc, #132]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	610b      	str	r3, [r1, #16]
 8004308:	e014      	b.n	8004334 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800430a:	4b1f      	ldr	r3, [pc, #124]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	4b21      	ldr	r3, [pc, #132]	@ (8004394 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6892      	ldr	r2, [r2, #8]
 8004316:	0211      	lsls	r1, r2, #8
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6952      	ldr	r2, [r2, #20]
 800431c:	0852      	lsrs	r2, r2, #1
 800431e:	3a01      	subs	r2, #1
 8004320:	0652      	lsls	r2, r2, #25
 8004322:	4311      	orrs	r1, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6852      	ldr	r2, [r2, #4]
 8004328:	3a01      	subs	r2, #1
 800432a:	0112      	lsls	r2, r2, #4
 800432c:	430a      	orrs	r2, r1
 800432e:	4916      	ldr	r1, [pc, #88]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004330:	4313      	orrs	r3, r2
 8004332:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004334:	4b14      	ldr	r3, [pc, #80]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a13      	ldr	r2, [pc, #76]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 800433a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800433e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fc ff24 	bl	800118c <HAL_GetTick>
 8004344:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004346:	e009      	b.n	800435c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004348:	f7fc ff20 	bl	800118c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d902      	bls.n	800435c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	73fb      	strb	r3, [r7, #15]
          break;
 800435a:	e005      	b.n	8004368 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ef      	beq.n	8004348 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800436e:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	4904      	ldr	r1, [pc, #16]	@ (8004388 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004378:	4313      	orrs	r3, r2
 800437a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	07ff800f 	.word	0x07ff800f
 8004390:	ff9f800f 	.word	0xff9f800f
 8004394:	f9ff800f 	.word	0xf9ff800f

08004398 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043a6:	4b72      	ldr	r3, [pc, #456]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00e      	beq.n	80043d0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0203 	and.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d103      	bne.n	80043ca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
       ||
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d142      	bne.n	8004450 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e03f      	b.n	8004450 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d018      	beq.n	800440a <RCCEx_PLLSAI2_Config+0x72>
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d825      	bhi.n	8004428 <RCCEx_PLLSAI2_Config+0x90>
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d002      	beq.n	80043e6 <RCCEx_PLLSAI2_Config+0x4e>
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d009      	beq.n	80043f8 <RCCEx_PLLSAI2_Config+0x60>
 80043e4:	e020      	b.n	8004428 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043e6:	4b62      	ldr	r3, [pc, #392]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11d      	bne.n	800442e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f6:	e01a      	b.n	800442e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043f8:	4b5d      	ldr	r3, [pc, #372]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004400:	2b00      	cmp	r3, #0
 8004402:	d116      	bne.n	8004432 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004408:	e013      	b.n	8004432 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800440a:	4b59      	ldr	r3, [pc, #356]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004416:	4b56      	ldr	r3, [pc, #344]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004426:	e006      	b.n	8004436 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
      break;
 800442c:	e004      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800442e:	bf00      	nop
 8004430:	e002      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004432:	bf00      	nop
 8004434:	e000      	b.n	8004438 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004436:	bf00      	nop
    }

    if(status == HAL_OK)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d108      	bne.n	8004450 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800443e:	4b4c      	ldr	r3, [pc, #304]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4949      	ldr	r1, [pc, #292]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 800444c:	4313      	orrs	r3, r2
 800444e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8086 	bne.w	8004564 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004458:	4b45      	ldr	r3, [pc, #276]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a44      	ldr	r2, [pc, #272]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 800445e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004464:	f7fc fe92 	bl	800118c <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800446a:	e009      	b.n	8004480 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800446c:	f7fc fe8e 	bl	800118c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d902      	bls.n	8004480 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	73fb      	strb	r3, [r7, #15]
        break;
 800447e:	e005      	b.n	800448c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004480:	4b3b      	ldr	r3, [pc, #236]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ef      	bne.n	800446c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d168      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d113      	bne.n	80044c0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004498:	4b35      	ldr	r3, [pc, #212]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	4b35      	ldr	r3, [pc, #212]	@ (8004574 <RCCEx_PLLSAI2_Config+0x1dc>)
 800449e:	4013      	ands	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6892      	ldr	r2, [r2, #8]
 80044a4:	0211      	lsls	r1, r2, #8
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68d2      	ldr	r2, [r2, #12]
 80044aa:	06d2      	lsls	r2, r2, #27
 80044ac:	4311      	orrs	r1, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6852      	ldr	r2, [r2, #4]
 80044b2:	3a01      	subs	r2, #1
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	430a      	orrs	r2, r1
 80044b8:	492d      	ldr	r1, [pc, #180]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	614b      	str	r3, [r1, #20]
 80044be:	e02d      	b.n	800451c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d115      	bne.n	80044f2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004578 <RCCEx_PLLSAI2_Config+0x1e0>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6892      	ldr	r2, [r2, #8]
 80044d2:	0211      	lsls	r1, r2, #8
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6912      	ldr	r2, [r2, #16]
 80044d8:	0852      	lsrs	r2, r2, #1
 80044da:	3a01      	subs	r2, #1
 80044dc:	0552      	lsls	r2, r2, #21
 80044de:	4311      	orrs	r1, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6852      	ldr	r2, [r2, #4]
 80044e4:	3a01      	subs	r2, #1
 80044e6:	0112      	lsls	r2, r2, #4
 80044e8:	430a      	orrs	r2, r1
 80044ea:	4921      	ldr	r1, [pc, #132]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	614b      	str	r3, [r1, #20]
 80044f0:	e014      	b.n	800451c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	4b21      	ldr	r3, [pc, #132]	@ (800457c <RCCEx_PLLSAI2_Config+0x1e4>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6892      	ldr	r2, [r2, #8]
 80044fe:	0211      	lsls	r1, r2, #8
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6952      	ldr	r2, [r2, #20]
 8004504:	0852      	lsrs	r2, r2, #1
 8004506:	3a01      	subs	r2, #1
 8004508:	0652      	lsls	r2, r2, #25
 800450a:	4311      	orrs	r1, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6852      	ldr	r2, [r2, #4]
 8004510:	3a01      	subs	r2, #1
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	430a      	orrs	r2, r1
 8004516:	4916      	ldr	r1, [pc, #88]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004518:	4313      	orrs	r3, r2
 800451a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800451c:	4b14      	ldr	r3, [pc, #80]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004526:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc fe30 	bl	800118c <HAL_GetTick>
 800452c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800452e:	e009      	b.n	8004544 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004530:	f7fc fe2c 	bl	800118c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d902      	bls.n	8004544 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	73fb      	strb	r3, [r7, #15]
          break;
 8004542:	e005      	b.n	8004550 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004544:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ef      	beq.n	8004530 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	4904      	ldr	r1, [pc, #16]	@ (8004570 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004560:	4313      	orrs	r3, r2
 8004562:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004564:	7bfb      	ldrb	r3, [r7, #15]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	07ff800f 	.word	0x07ff800f
 8004578:	ff9f800f 	.word	0xff9f800f
 800457c:	f9ff800f 	.word	0xf9ff800f

08004580 <memset>:
 8004580:	4402      	add	r2, r0
 8004582:	4603      	mov	r3, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	d100      	bne.n	800458a <memset+0xa>
 8004588:	4770      	bx	lr
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f9      	b.n	8004584 <memset+0x4>

08004590 <__libc_init_array>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4d0d      	ldr	r5, [pc, #52]	@ (80045c8 <__libc_init_array+0x38>)
 8004594:	4c0d      	ldr	r4, [pc, #52]	@ (80045cc <__libc_init_array+0x3c>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	2600      	movs	r6, #0
 800459c:	42a6      	cmp	r6, r4
 800459e:	d109      	bne.n	80045b4 <__libc_init_array+0x24>
 80045a0:	4d0b      	ldr	r5, [pc, #44]	@ (80045d0 <__libc_init_array+0x40>)
 80045a2:	4c0c      	ldr	r4, [pc, #48]	@ (80045d4 <__libc_init_array+0x44>)
 80045a4:	f000 f818 	bl	80045d8 <_init>
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	2600      	movs	r6, #0
 80045ae:	42a6      	cmp	r6, r4
 80045b0:	d105      	bne.n	80045be <__libc_init_array+0x2e>
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b8:	4798      	blx	r3
 80045ba:	3601      	adds	r6, #1
 80045bc:	e7ee      	b.n	800459c <__libc_init_array+0xc>
 80045be:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c2:	4798      	blx	r3
 80045c4:	3601      	adds	r6, #1
 80045c6:	e7f2      	b.n	80045ae <__libc_init_array+0x1e>
 80045c8:	08004630 	.word	0x08004630
 80045cc:	08004630 	.word	0x08004630
 80045d0:	08004630 	.word	0x08004630
 80045d4:	08004634 	.word	0x08004634

080045d8 <_init>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr

080045e4 <_fini>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr
